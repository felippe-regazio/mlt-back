"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeJWT = exports.encodeJWT = exports.JWT_SECRET = exports.JWT_COOKIE_NAME = void 0;
const dotenv = __importStar(require("dotenv"));
dotenv.config();
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
/**
 * This const defines the name to be used on the generated cookie that will store our JWT Tokens.
 * We gonna use tokens becase use Local Storage, despite being simpler, is potencialy unsecure.
 */
exports.JWT_COOKIE_NAME = process.env.JWT_COOKIE_NAME;
/**
 * WARN:
 *
 * Idealy this should be generated by a random hash generator and should be stored as ENV VAR.
 * But for this project we are avoiding use DOTENV just for fast deployment and easier setup
 * You can generate a new SECRET by runnin on node: require('crypto').randomBytes(64).toString('hex')
 */
exports.JWT_SECRET = process.env.JWT_SECRET;
/**
 * WARN:
 *
 * The generated token should expire in a couple hours, but this would drive us to a token refresher.
 * To save time we will use a long-live generated token, so we avoid the needing of a refresher now
 * saving time and complexity for both backend and frontend applications (simple challange tradeoff).
 */
function encodeJWT(data) {
    return jsonwebtoken_1.default.sign(data, exports.JWT_SECRET, { expiresIn: '30d' });
}
exports.encodeJWT = encodeJWT;
/**
 * Verify a token that was generated using the encodeJWT function. If the cookie has been successfuly
 * decoded, this function will return the provided data that was encoded.
 */
function decodeJWT(token) {
    return new Promise(resolve => {
        if (!token) {
            return resolve({ error: 'No token provided', data: null });
        }
        jsonwebtoken_1.default.verify(token, exports.JWT_SECRET, (error, data) => {
            error && console.error(error);
            resolve({ error, data });
        });
    });
}
exports.decodeJWT = decodeJWT;
